defmodule Squadster.Web.Schema.SquadSpec do
  use ESpec.Phoenix, async: true
  use ESpec.Phoenix.Extend, :controller

  import Mockery

  alias Squadster.Formations.Squad
  alias Squadster.Formations.Tasks.NormalizeQueue

  let :user, do: insert(:user)

  describe "queries" do
    describe "squads" do
      let :list_squads, do: %{query: list_squads_query()}
      let :list_squads_query do
        """
          query getSquads {
            squads {
              id
              classDay
              squadNumber
            }
          }
        """
      end

      it "returns list of squads" do
        squads_count = entities_count(Squad)
        expect json_response(api_request(list_squads()), 200)["data"]["squads"]
        |> Enum.count
        |> to(eq squads_count)
      end
    end
  end

  describe "mutations" do
    describe "create_squad" do
      let :create_squad, do: %{query: create_squad_query(), variables: create_params()}
      let :create_params, do: %{squad_number: "123456", class_day: 3}
      let :create_squad_query do
        """
          mutation createSquad($squad_number: String, $class_day: Int) {
            createSquad(squad_number: $squad_number, class_day: $class_day) {
              squad_number
              class_day
            }
          }
        """
      end

      it "creates a new squad with valid attributes" do
        previous_count = entities_count(Squad)
        api_request(create_squad())
        expect entities_count(Squad) |> to(eq previous_count + 1)
      end
    end

    describe "delete_squad" do
      let :delete_squad_query do
        """
          mutation deleteSquad($id: Int) {
            deleteSquad(id: $id) {
              squadNumber
            }
          }
        """
      end

      def delete_squad(squad_id) do
        %{query: delete_squad_query(), variables: %{id: squad_id}}
      end

      before do
        mock NormalizeQueue, :start_link
      end

      it "deletes a squad by id" do
        squad = build(:squad) |> with_commander(user()) |> insert
        previous_count = entities_count(Squad)
        user() |> api_request(delete_squad(squad.id))

        expect entities_count(Squad) |> to(eq previous_count - 1)
      end
    end

    describe "update_squad" do
      let :update_squad_query do
        """
          mutation updateSquad($id: Int, $squad_number: String, $advertisment: String, $class_day: Int) {
            updateSquad(id: $id, squad_number: $squad_number, advertisment: $advertisment, class_day: $class_day) {
              squad_number
              advertisment
              class_day
            }
          }
        """
      end

      let :update_params, do: %{
        id: nil,
        squad_number: "1r2a3n4d5o6m",
        advertisment: "Very random string that cannot be generated by Faker, oogoo",
        class_day: 4
      }

      def update_squad(squad_id) do
        params = %{update_params() | id: squad_id}
        %{query: update_squad_query(), variables: params}
      end

      it "updates a squad by id" do
        squad = build(:squad) |> with_commander(user()) |> insert

        user() |> api_request(update_squad(squad.id))

        expect Repo.get(Squad, squad.id).advertisment |> to(eq update_params().advertisment)
        expect {:ok, Repo.get(Squad, squad.id).class_day} |> to(eq Squad.ClassDayEnum.cast(update_params().class_day))
        expect Repo.get(Squad, squad.id).squad_number |> to(eq update_params().squad_number)
      end
    end
  end
end
